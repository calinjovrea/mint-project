[{"/home/calinj/Documents/poorpandasnfts/src/index.tsx":"1","/home/calinj/Documents/poorpandasnfts/src/reportWebVitals.ts":"2","/home/calinj/Documents/poorpandasnfts/src/App.tsx":"3","/home/calinj/Documents/poorpandasnfts/src/Home.tsx":"4","/home/calinj/Documents/poorpandasnfts/src/Slider.js":"5","/home/calinj/Documents/poorpandasnfts/src/candy-machine.ts":"6","/home/calinj/Documents/poorpandasnfts/src/utils.ts":"7","/home/calinj/Documents/poorpandasnfts/src/MintCountdown.tsx":"8","/home/calinj/Documents/poorpandasnfts/src/MintButton.tsx":"9","/home/calinj/Documents/poorpandasnfts/src/connection.tsx":"10"},{"size":501,"mtime":1646137299133,"results":"11","hashOfConfig":"12"},{"size":425,"mtime":1645843042000,"results":"13","hashOfConfig":"12"},{"size":3791,"mtime":1646186952204,"results":"14","hashOfConfig":"12"},{"size":16613,"mtime":1646265276849,"results":"15","hashOfConfig":"12"},{"size":1280,"mtime":1646312720545,"results":"16","hashOfConfig":"12"},{"size":12498,"mtime":1645843042000,"results":"17","hashOfConfig":"12"},{"size":3204,"mtime":1645843042000,"results":"18","hashOfConfig":"12"},{"size":2710,"mtime":1645843042000,"results":"19","hashOfConfig":"12"},{"size":2059,"mtime":1645843042000,"results":"20","hashOfConfig":"12"},{"size":14557,"mtime":1645843042000,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"hqdq0e",{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/calinj/Documents/poorpandasnfts/src/index.tsx",[],"/home/calinj/Documents/poorpandasnfts/src/reportWebVitals.ts",[],"/home/calinj/Documents/poorpandasnfts/src/App.tsx",["45","46"],"import \"./App.css\";\nimport { useMemo } from \"react\";\nimport * as anchor from \"@project-serum/anchor\";\nimport Home from \"./Home\";\nimport styled from \"styled-components\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport Logo from \"../src/img/logo.webp\";\nimport Discord from \"../src/img/discord.webp\";\nimport Twitter from \"../src/img/twitter.webp\";\nimport {\n  getPhantomWallet,\n  getSlopeWallet,\n  getSolflareWallet,\n  getSolletWallet,\n  getSolletExtensionWallet,\n} from \"@solana/wallet-adapter-wallets\";\n\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\n\nimport { ThemeProvider, createTheme } from \"@material-ui/core\";\n\nconst theme = createTheme({\n  palette: {\n    type: \"dark\",\n  },\n});\n\nconst getCandyMachineId = (): anchor.web3.PublicKey | undefined => {\n  try {\n    const candyMachineId = new anchor.web3.PublicKey(\n      process.env.REACT_APP_CANDY_MACHINE_ID!\n    );\n\n    return candyMachineId;\n  } catch (e) {\n    console.log(\"Failed to construct CandyMachineId\", e);\n    return undefined;\n  }\n};\nconst Header = styled.header`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 2rem;\n  & h1 {\n    color: #fafafa;\n    font-size: 2.4rem;\n    font-style: italic;\n    font-weight: 900;\n    text-align: center;\n    transform: translateX(-0.5rem);\n\n    text-transform: uppercase;\n    letter-spacing: 0.8rem;\n  }\n\n  & h1 span {\n    color: rgb(253, 98, 98);\n  }\n  & .social-wrapper {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    transform: translateX(-6.9rem);\n    cursor: pointer;\n  }\n\n  & .social-wrapper .social-link a {\n    text-decoration: none;\n    display: inline-block;\n    height: 100%;\n    width: 100%;\n    cursor: pointer;\n    margin: 0.8rem;\n  }\n`;\nconst candyMachineId = getCandyMachineId();\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\nconst connection = new anchor.web3.Connection(\n  rpcHost ? rpcHost : anchor.web3.clusterApiUrl(\"devnet\")\n);\n\nconst txTimeoutInMilliseconds = 30000;\n\nconst App = () => {\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\n\n  const wallets = useMemo(\n    () => [\n      getPhantomWallet(),\n      getSolflareWallet(),\n      getSlopeWallet(),\n      getSolletWallet({ network }),\n      getSolletExtensionWallet({ network }),\n    ],\n    []\n  );\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Header>\n        <div className=\"image-wrapper\">\n          <img src={Logo} alt=\"main-logo\" />\n        </div>\n        <h1>\n          Pre<span>sale</span>\n        </h1>\n        <div className=\"social-wrapper\">\n          <div className=\"social-link discord\">\n            <a href=\"https://discord.com/invite/8cVPaPb4qD\" target=\"_blank\">\n              <img src={Discord} alt=\"Discord logo\" />\n            </a>\n          </div>\n          <div className=\"social-link twitter\">\n            <a href=\"https://twitter.com/PoorPandasNFT\" target=\"_blank\">\n              <img src={Twitter} alt=\"Twitter logo\" />\n            </a>\n          </div>\n        </div>\n      </Header>\n      <ConnectionProvider endpoint={endpoint}>\n        <WalletProvider wallets={wallets} autoConnect>\n          <WalletDialogProvider>\n            <Home\n              candyMachineId={candyMachineId}\n              connection={connection}\n              txTimeout={txTimeoutInMilliseconds}\n              rpcHost={rpcHost}\n            />\n          </WalletDialogProvider>\n        </WalletProvider>\n      </ConnectionProvider>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","/home/calinj/Documents/poorpandasnfts/src/Home.tsx",["47","48"],"import { useEffect, useMemo, useState, useCallback } from \"react\";\nimport * as anchor from \"@project-serum/anchor\";\n\nimport styled from \"styled-components\";\n// import Carousel from \"react-elastic-carousel\";\n\nimport { Container, Snackbar } from \"@material-ui/core\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\nimport {\n  awaitTransactionSignatureConfirmation,\n  CandyMachineAccount,\n  CANDY_MACHINE_PROGRAM,\n  getCandyMachineState,\n  mintOneToken,\n} from \"./candy-machine\";\nimport { AlertState, toDate, formatNumber, getAtaForMint } from \"./utils\";\nimport { MintCountdown } from \"./MintCountdown\";\nimport { MintButton } from \"./MintButton\";\nimport { GatewayProvider } from \"@civic/solana-gateway-react\";\nimport Slider from \"./Slider\";\n// import NFT1 from \"../src/img/0.png\";\n// import NFT2 from \"../src/img/1.png\";\n// import NFT3 from \"../src/img/2.png\";\n// import NFT4 from \"../src/img/3.png\";\n// import NFT5 from \"../src/img/4.png\";\n// import NFT6 from \"../src/img/5.png\";\n// import NFT7 from \"../src/img/6.png\";\n// import NFT8 from \"../src/img/7.png\";\n// import NFT9 from \"../src/img/8.png\";\n// import NFT10 from \"../src/img/9.png\";\nconst ConnectButton = styled(WalletDialogButton)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`;\n\nconst MintContainer = styled.div``; // add your owns styles here\nconst Item = styled.div`\n  height: 18rem;\n  width: 16rem;\n  overflow: hidden;\n  margin: 3.6rem auto;\n\n  & .image-container {\n    display: flex;\n    transform: translateX(0);\n    transition: transform 0.5s ease-in-out;\n  }\n\n  & .image-container img {\n    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.15);\n    display: inline-block;\n    height: 18rem;\n    width: 16rem;\n    border-radius: 0.8rem;\n  }\n`;\n\nexport interface HomeProps {\n  candyMachineId?: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  txTimeout: number;\n  rpcHost: string;\n}\n\nconst Home = (props: HomeProps) => {\n  const [isUserMinting, setIsUserMinting] = useState(false);\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: \"\",\n    severity: undefined,\n  });\n  const [isActive, setIsActive] = useState(false);\n  const [endDate, setEndDate] = useState<Date>();\n  const [itemsRemaining, setItemsRemaining] = useState<number>();\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\n  const [isPresale, setIsPresale] = useState(false);\n  const [discountPrice, setDiscountPrice] = useState<anchor.BN>();\n\n  const rpcUrl = props.rpcHost;\n  const wallet = useWallet();\n\n  const anchorWallet = useMemo(() => {\n    if (\n      !wallet ||\n      !wallet.publicKey ||\n      !wallet.signAllTransactions ||\n      !wallet.signTransaction\n    ) {\n      return;\n    }\n\n    return {\n      publicKey: wallet.publicKey,\n      signAllTransactions: wallet.signAllTransactions,\n      signTransaction: wallet.signTransaction,\n    } as anchor.Wallet;\n  }, [wallet]);\n\n  const refreshCandyMachineState = useCallback(async () => {\n    if (!anchorWallet) {\n      return;\n    }\n\n    if (props.candyMachineId) {\n      try {\n        const cndy = await getCandyMachineState(\n          anchorWallet,\n          props.candyMachineId,\n          props.connection\n        );\n        let active =\n          cndy?.state.goLiveDate?.toNumber() < new Date().getTime() / 1000;\n        let presale = false;\n        // whitelist mint?\n        if (cndy?.state.whitelistMintSettings) {\n          // is it a presale mint?\n          if (\n            cndy.state.whitelistMintSettings.presale &&\n            (!cndy.state.goLiveDate ||\n              cndy.state.goLiveDate.toNumber() > new Date().getTime() / 1000)\n          ) {\n            presale = true;\n          }\n          // is there a discount?\n          if (cndy.state.whitelistMintSettings.discountPrice) {\n            setDiscountPrice(cndy.state.whitelistMintSettings.discountPrice);\n          } else {\n            setDiscountPrice(undefined);\n            // when presale=false and discountPrice=null, mint is restricted\n            // to whitelist users only\n            if (!cndy.state.whitelistMintSettings.presale) {\n              cndy.state.isWhitelistOnly = true;\n            }\n          }\n          // retrieves the whitelist token\n          const mint = new anchor.web3.PublicKey(\n            cndy.state.whitelistMintSettings.mint\n          );\n          const token = (await getAtaForMint(mint, anchorWallet.publicKey))[0];\n\n          try {\n            const balance = await props.connection.getTokenAccountBalance(\n              token\n            );\n            let valid = parseInt(balance.value.amount) > 0;\n            // only whitelist the user if the balance > 0\n            setIsWhitelistUser(valid);\n            active = (presale && valid) || active;\n          } catch (e) {\n            setIsWhitelistUser(false);\n            // no whitelist user, no mint\n            if (cndy.state.isWhitelistOnly) {\n              active = false;\n            }\n            console.log(\"There was a problem fetching whitelist token balance\");\n            console.log(e);\n          }\n        }\n        // datetime to stop the mint?\n        if (cndy?.state.endSettings?.endSettingType.date) {\n          setEndDate(toDate(cndy.state.endSettings.number));\n          if (\n            cndy.state.endSettings.number.toNumber() <\n            new Date().getTime() / 1000\n          ) {\n            active = false;\n          }\n        }\n        // amount to stop the mint?\n        if (cndy?.state.endSettings?.endSettingType.amount) {\n          let limit = Math.min(\n            cndy.state.endSettings.number.toNumber(),\n            cndy.state.itemsAvailable\n          );\n          if (cndy.state.itemsRedeemed < limit) {\n            setItemsRemaining(limit - cndy.state.itemsRedeemed);\n          } else {\n            setItemsRemaining(0);\n            cndy.state.isSoldOut = true;\n          }\n        } else {\n          setItemsRemaining(cndy.state.itemsRemaining);\n        }\n\n        if (cndy.state.isSoldOut) {\n          active = false;\n        }\n\n        setIsActive((cndy.state.isActive = active));\n        setIsPresale((cndy.state.isPresale = presale));\n        setCandyMachine(cndy);\n      } catch (e) {\n        console.log(\"There was a problem fetching Candy Machine state\");\n        console.log(e);\n      }\n    }\n  }, [anchorWallet, props.candyMachineId, props.connection]);\n\n  const onMint = async () => {\n    try {\n      setIsUserMinting(true);\n      document.getElementById(\"#identity\")?.click();\n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\n        const mintTxId = (\n          await mintOneToken(candyMachine, wallet.publicKey)\n        )[0];\n\n        let status: any = { err: true };\n        if (mintTxId) {\n          status = await awaitTransactionSignatureConfirmation(\n            mintTxId,\n            props.txTimeout,\n            props.connection,\n            true\n          );\n        }\n\n        if (status && !status.err) {\n          // manual update since the refresh might not detect\n          // the change immediately\n          let remaining = itemsRemaining! - 1;\n          setItemsRemaining(remaining);\n          setIsActive((candyMachine.state.isActive = remaining > 0));\n          candyMachine.state.isSoldOut = remaining === 0;\n          setAlertState({\n            open: true,\n            message: \"Congratulations! Mint succeeded!\",\n            severity: \"success\",\n          });\n        } else {\n          setAlertState({\n            open: true,\n            message: \"Mint failed! Please try again!\",\n            severity: \"error\",\n          });\n        }\n      }\n    } catch (error: any) {\n      let message = error.msg || \"Minting failed! Please try again!\";\n      if (!error.msg) {\n        if (!error.message) {\n          message = \"Transaction Timeout! Please try again.\";\n        } else if (error.message.indexOf(\"0x137\")) {\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf(\"0x135\")) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          message = `SOLD OUT!`;\n          window.location.reload();\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: \"error\",\n      });\n      // updates the candy machine state to reflect the lastest\n      // information on chain\n      refreshCandyMachineState();\n    } finally {\n      setIsUserMinting(false);\n    }\n  };\n\n  const toggleMintButton = () => {\n    let active = !isActive || isPresale;\n\n    if (active) {\n      if (candyMachine!.state.isWhitelistOnly && !isWhitelistUser) {\n        active = false;\n      }\n      if (endDate && Date.now() >= endDate.getTime()) {\n        active = false;\n      }\n    }\n\n    if (\n      isPresale &&\n      candyMachine!.state.goLiveDate &&\n      candyMachine!.state.goLiveDate.toNumber() <= new Date().getTime() / 1000\n    ) {\n      setIsPresale((candyMachine!.state.isPresale = false));\n    }\n\n    setIsActive((candyMachine!.state.isActive = active));\n  };\n\n  useEffect(() => {\n    refreshCandyMachineState();\n  }, [\n    anchorWallet,\n    props.candyMachineId,\n    props.connection,\n    refreshCandyMachineState,\n  ]);\n\n  const breakPoints = [{ width: 550, itemsToShow: 1, isRTL: false }];\n  return (\n    <Container style={{ marginTop: 100 }}>\n      <Slider></Slider>\n      <Container maxWidth=\"xs\" style={{ position: \"relative\" }}>\n        <Paper\n          style={{\n            padding: 24,\n            paddingBottom: 10,\n            backgroundColor: \"#151A1F\",\n            borderRadius: 6,\n          }}\n        >\n          {!wallet.connected ? (\n            <ConnectButton>Connect Wallet</ConnectButton>\n          ) : (\n            <>\n              {candyMachine && (\n                <Grid\n                  container\n                  direction=\"row\"\n                  justifyContent=\"center\"\n                  wrap=\"nowrap\"\n                >\n                  <Grid item xs={3}>\n                    <Typography variant=\"body2\" color=\"textSecondary\">\n                      Remaining\n                    </Typography>\n                    <Typography\n                      variant=\"h6\"\n                      color=\"textPrimary\"\n                      style={{\n                        fontWeight: \"bold\",\n                      }}\n                    >\n                      {`${itemsRemaining}`}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={4}>\n                    <Typography variant=\"body2\" color=\"textSecondary\">\n                      {isWhitelistUser && discountPrice\n                        ? \"Discount Price\"\n                        : \"Price\"}\n                    </Typography>\n                    <Typography\n                      variant=\"h6\"\n                      color=\"textPrimary\"\n                      style={{ fontWeight: \"bold\" }}\n                    >\n                      {isWhitelistUser && discountPrice\n                        ? `◎ ${formatNumber.asNumber(discountPrice)}`\n                        : `◎ ${formatNumber.asNumber(\n                            candyMachine.state.price\n                          )}`}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={5}>\n                    {isActive && endDate && Date.now() < endDate.getTime() ? (\n                      <>\n                        <MintCountdown\n                          key=\"endSettings\"\n                          date={getCountdownDate(candyMachine)}\n                          style={{ justifyContent: \"flex-end\" }}\n                          status=\"COMPLETED\"\n                          onComplete={toggleMintButton}\n                        />\n                        <Typography\n                          variant=\"caption\"\n                          align=\"center\"\n                          display=\"block\"\n                          style={{ fontWeight: \"bold\" }}\n                        >\n                          TO END OF MINT\n                        </Typography>\n                      </>\n                    ) : (\n                      <>\n                        <MintCountdown\n                          key=\"goLive\"\n                          date={getCountdownDate(candyMachine)}\n                          style={{ justifyContent: \"flex-end\" }}\n                          status={\n                            candyMachine?.state?.isSoldOut ||\n                            (endDate && Date.now() > endDate.getTime())\n                              ? \"COMPLETED\"\n                              : isPresale\n                              ? \"PRESALE\"\n                              : \"LIVE\"\n                          }\n                          onComplete={toggleMintButton}\n                        />\n                        {isPresale &&\n                          candyMachine.state.goLiveDate &&\n                          candyMachine.state.goLiveDate.toNumber() >\n                            new Date().getTime() / 1000 && (\n                            <Typography\n                              variant=\"caption\"\n                              align=\"center\"\n                              display=\"block\"\n                              style={{ fontWeight: \"bold\" }}\n                            >\n                              UNTIL PUBLIC MINT\n                            </Typography>\n                          )}\n                      </>\n                    )}\n                  </Grid>\n                </Grid>\n              )}\n              <MintContainer>\n                {candyMachine?.state.isActive &&\n                candyMachine?.state.gatekeeper &&\n                wallet.publicKey &&\n                wallet.signTransaction ? (\n                  <GatewayProvider\n                    wallet={{\n                      publicKey:\n                        wallet.publicKey ||\n                        new PublicKey(CANDY_MACHINE_PROGRAM),\n                      //@ts-ignore\n                      signTransaction: wallet.signTransaction,\n                    }}\n                    gatekeeperNetwork={\n                      candyMachine?.state?.gatekeeper?.gatekeeperNetwork\n                    }\n                    clusterUrl={rpcUrl}\n                    options={{ autoShowModal: false }}\n                  >\n                    <MintButton\n                      candyMachine={candyMachine}\n                      isMinting={isUserMinting}\n                      onMint={onMint}\n                      isActive={isActive || (isPresale && isWhitelistUser)}\n                    />\n                  </GatewayProvider>\n                ) : (\n                  <MintButton\n                    candyMachine={candyMachine}\n                    isMinting={isUserMinting}\n                    onMint={onMint}\n                    isActive={isActive || (isPresale && isWhitelistUser)}\n                  />\n                )}\n              </MintContainer>\n            </>\n          )}\n          <Typography\n            variant=\"caption\"\n            align=\"center\"\n            display=\"block\"\n            style={{ marginTop: 7, color: \"grey\" }}\n          ></Typography>\n        </Paper>\n      </Container>\n\n      <Snackbar\n        open={alertState.open}\n        autoHideDuration={6000}\n        onClose={() => setAlertState({ ...alertState, open: false })}\n      >\n        <Alert\n          onClose={() => setAlertState({ ...alertState, open: false })}\n          severity={alertState.severity}\n        >\n          {alertState.message}\n        </Alert>\n      </Snackbar>\n    </Container>\n  );\n};\n\nconst getCountdownDate = (\n  candyMachine: CandyMachineAccount\n): Date | undefined => {\n  if (\n    candyMachine.state.isActive &&\n    candyMachine.state.endSettings?.endSettingType.date\n  ) {\n    return toDate(candyMachine.state.endSettings.number);\n  }\n\n  return toDate(\n    candyMachine.state.goLiveDate\n      ? candyMachine.state.goLiveDate\n      : candyMachine.state.isPresale\n      ? new anchor.BN(new Date().getTime() / 1000)\n      : undefined\n  );\n};\n\nexport default Home;\n","/home/calinj/Documents/poorpandasnfts/src/Slider.js",["49"],"import React, { useState, useEffect } from \"react\";\r\nimport \"./Slider.css\";\r\n\r\nconst dataSlider = [\r\n  {\r\n    id: \"NFT1\",\r\n    title: \"item-one\",\r\n  },\r\n  {\r\n    id: \"NFT2\",\r\n    title: \"item-two\",\r\n  },\r\n  {\r\n    id: \"NFT3\",\r\n    title: \"item-three\",\r\n  },\r\n  {\r\n    id: \"NFT4\",\r\n    title: \"item-four\",\r\n  },\r\n  {\r\n    id: \"NFT5\",\r\n    title: \"item-five\",\r\n  },\r\n  {\r\n    id: \"NFT6\",\r\n    title: \"item-six\",\r\n  },\r\n  {\r\n    id: \"NFT7\",\r\n    title: \"item-seven\",\r\n  },\r\n  {\r\n    id: \"NFT8\",\r\n    title: \"item-eight\",\r\n  },\r\n  {\r\n    id: \"NFT9\",\r\n    title: \"item-nine\",\r\n  },\r\n  {\r\n    id: \"NFT10\",\r\n    title: \"item-ten\",\r\n  },\r\n];\r\nexport default function Slider() {\r\n  const [slideIndex, setSlideIndex] = useState(0);\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setSlideIndex(Math.floor(Math.random() * 9));\r\n    }, 3500);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n  return (\r\n    <div className=\"container-slider\">\r\n      {dataSlider.map((obj, index) => {\r\n        return (\r\n          <div\r\n            key={obj.id}\r\n            className={slideIndex === index ? \"slide\" : \"slide\"}\r\n          >\r\n            <img src={process.env.PUBLIC_URL + `/imgs/${slideIndex}.png`} />\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","/home/calinj/Documents/poorpandasnfts/src/candy-machine.ts",[],"/home/calinj/Documents/poorpandasnfts/src/utils.ts",[],"/home/calinj/Documents/poorpandasnfts/src/MintCountdown.tsx",[],"/home/calinj/Documents/poorpandasnfts/src/MintButton.tsx",[],"/home/calinj/Documents/poorpandasnfts/src/connection.tsx",[],{"ruleId":"50","severity":1,"message":"51","line":120,"column":13,"nodeType":"52","messageId":"53","endLine":120,"endColumn":77,"fix":"54"},{"ruleId":"50","severity":1,"message":"51","line":125,"column":13,"nodeType":"52","messageId":"53","endLine":125,"endColumn":73,"fix":"55"},{"ruleId":"56","severity":1,"message":"57","line":49,"column":7,"nodeType":"58","messageId":"59","endLine":49,"endColumn":11},{"ruleId":"56","severity":1,"message":"60","line":315,"column":9,"nodeType":"58","messageId":"59","endLine":315,"endColumn":20},{"ruleId":"61","severity":1,"message":"62","line":62,"column":13,"nodeType":"52","endLine":62,"endColumn":77},"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"63","text":"64"},{"range":"65","text":"64"},"@typescript-eslint/no-unused-vars","'Item' is assigned a value but never used.","Identifier","unusedVar","'breakPoints' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",[2987,2987]," rel=\"noreferrer\"",[3197,3197]]